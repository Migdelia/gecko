// JavaScript Document
function validador (formulario) {
	$(function(){
			$("#"+formulario).bind("submit", validar);
		}
	);
	
	/**
	* Executa a verificaçao
	*/
	function validar(e){
		// determina se o form pode ser submetido ou nao
		var canSubmit = true;
		
		// acumula as mensagens de erro
		var messages = "<ul>";
		
		// faz uma busca por todos elementos que especificam o atributo req=true
		$("[req=true]").each(
			function(){
				if($(this).val().length < 1){
					canSubmit = false;
					messages += "<li>" + $(this).attr("label") + " é obrigatório</li>";
				}
			}
		);
		messages += "</ul>";
		
		// verifica se vai exibir as mensagens de erro
		if(canSubmit == false)
			$("#divError").html(messages).css("color", "#E91926").fadeIn(300);
			
		return canSubmit;
	}
}
//########################################
//Faz um STR_REPLACE no javascript
//########################################
function str_replace(chars,repls,str) {
	if (chars instanceof Array) {
		var arrString = new Array();
		for (i=0; i<chars.length; i++) {
			 var count = i-1;
			 if (i>0) {
				 arrString.push(arrString[count].replace(chars[i],repls[i]));
			 } else {
				 arrString.push(str.replace(chars[i],repls[i]));
			 }
		}
		string = arrString.pop();
	} else {
		string = str.replace(chars,repls);
	}
	return string;
}
//########################################
//Abre um Pop Up Centralizado na tela
//########################################
function abre_janela(url,l,a) {
    var x = parseInt((screen.width-l)/2);
    var y = parseInt((screen.height-a)/2);
    var win = window.open(url,'','channelmode=0,directories=0,location=0,menubar=0,resizable=0,scrollbars=0,status=0,toolbar=0,width='+l+',height='+a);
    win.moveTo(x,y);
}

//########################################
//Retorna apenas os numeros
//########################################
function limpa_string( S ) {
	var Digitos = "0123456789";
	var temp = "";
	var digito = "";
	for (var i=0; i<S.length; i++) {
		digito = S.charAt(i);
		if (Digitos.indexOf(digito)>=0) {
			temp=temp+digito;
		}
	}
	return temp;
}

//########################################
//Cache do Ajax para o DataTables
//########################################
		//Ajax cache
var oCache = {
	iCacheLower: -1
};

function fnSetKey( aoData, sKey, mValue )
{
	for ( var i=0, iLen=aoData.length ; i<iLen ; i++ )
	{
		if ( aoData[i].name == sKey )
		{
			aoData[i].value = mValue;
		}
	}
}

function fnGetKey( aoData, sKey )
{
	for ( var i=0, iLen=aoData.length ; i<iLen ; i++ )
	{
		if ( aoData[i].name == sKey )
		{
			return aoData[i].value;
		}
	}
	return null;
}

function fnDataTablesPipeline ( sSource, aoData, fnCallback ) {
	var iPipe = 5; /* Ajust the pipe size */
	
	var bNeedServer = false;
	var sEcho = fnGetKey(aoData, "sEcho");
	var iRequestStart = fnGetKey(aoData, "iDisplayStart");
	var iRequestLength = fnGetKey(aoData, "iDisplayLength");
	var iRequestEnd = iRequestStart + iRequestLength;
	oCache.iDisplayStart = iRequestStart;
	
	/* outside pipeline? */
	if ( oCache.iCacheLower < 0 || iRequestStart < oCache.iCacheLower || iRequestEnd > oCache.iCacheUpper )
	{
		bNeedServer = true;
	}
	
	/* sorting etc changed? */
	if ( oCache.lastRequest && !bNeedServer )
	{
		for( var i=0, iLen=aoData.length ; i<iLen ; i++ )
		{
			if ( aoData[i].name != "iDisplayStart" && aoData[i].name != "iDisplayLength" && aoData[i].name != "sEcho" )
			{
				if ( aoData[i].value != oCache.lastRequest[i].value )
				{
					bNeedServer = true;
					break;
				}
			}
		}
	}
	
	/* Store the request for checking next time around */
	oCache.lastRequest = aoData.slice();
	
	if ( bNeedServer )
	{
		if ( iRequestStart < oCache.iCacheLower )
		{
			iRequestStart = iRequestStart - (iRequestLength*(iPipe-1));
			if ( iRequestStart < 0 )
			{
				iRequestStart = 0;
			}
		}
		
		oCache.iCacheLower = iRequestStart;
		oCache.iCacheUpper = iRequestStart + (iRequestLength * iPipe);
		oCache.iDisplayLength = fnGetKey( aoData, "iDisplayLength" );
		fnSetKey( aoData, "iDisplayStart", iRequestStart );
		fnSetKey( aoData, "iDisplayLength", iRequestLength*iPipe );
		
		$.getJSON( sSource, aoData, function (json) { 
			/* Callback processing */
			oCache.lastJson = jQuery.extend(true, {}, json);
			
			if ( oCache.iCacheLower != oCache.iDisplayStart )
			{
				json.aaData.splice( 0, oCache.iDisplayStart-oCache.iCacheLower );
			}
			json.aaData.splice( oCache.iDisplayLength, json.aaData.length );
			
			fnCallback(json)
		} );
	}
	else
	{
		json = jQuery.extend(true, {}, oCache.lastJson);
		json.sEcho = sEcho; /* Update the echo for each response */
		json.aaData.splice( 0, iRequestStart-oCache.iCacheLower );
		json.aaData.splice( iRequestLength, json.aaData.length );
		fnCallback(json);
		return;
	}
}